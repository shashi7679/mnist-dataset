# -*- coding: utf-8 -*-
"""plot_digits_classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QeDO9ULyRr6_UXAm3Z4vgPUT5JmDI7Ew
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

"""
# Recognizing hand-written digits

This example shows how scikit-learn can be used to recognize images of
hand-written digits, from 0-9.
"""

print(__doc__)

# Author: Gael Varoquaux <gael dot varoquaux at normalesup dot org>
# License: BSD 3 clause

# Standard scientific Python imports
import matplotlib.pyplot as plt

# Import datasets, classifiers and performance metrics
from sklearn import datasets, svm, metrics
from sklearn.model_selection import train_test_split

"""## Digits dataset

The digits dataset consists of 8x8
pixel images of digits. The ``images`` attribute of the dataset stores
8x8 arrays of grayscale values for each image. We will use these arrays to
visualize the first 4 images. The ``target`` attribute of the dataset stores
the digit each image represents and this is included in the title of the 4
plots below.

Note: if we were working from image files (e.g., 'png' files), we would load
them using :func:`matplotlib.pyplot.imread`.


"""

digits = datasets.load_digits()

_, axes = plt.subplots(nrows=1, ncols=4, figsize=(10, 3))
for ax, image, label in zip(axes, digits.images, digits.target):
    ax.set_axis_off()
    ax.imshow(image, cmap=plt.cm.gray_r, interpolation='nearest')
    ax.set_title('Training: %i' % label)

"""## Classification

To apply a classifier on this data, we need to flatten the images, turning
each 2-D array of grayscale values from shape ``(8, 8)`` into shape
``(64,)``. Subsequently, the entire dataset will be of shape
``(n_samples, n_features)``, where ``n_samples`` is the number of images and
``n_features`` is the total number of pixels in each image.

We can then split the data into train and test subsets and fit a support
vector classifier on the train samples. The fitted classifier can
subsequently be used to predict the value of the digit for the samples
in the test subset.


"""

# flatten the images
n_samples = len(digits.images)
data = digits.images.reshape((n_samples, -1))

# Create a classifier: a support vector classifier
clf = svm.SVC(gamma=0.001)

# Split data into 80% train and 20% test subsets
X_train, X_test, y_train, y_test = train_test_split(
    data, digits.target, test_size=0.8, shuffle=False)
# Split data into 90% train and 10% test subsets
X_train91, X_test91, y_train91, y_test91 = train_test_split(
    data, digits.target, test_size=0.9, shuffle=False)

# Split data into 75% train and 25% test subsets
X_train75, X_test75, y_train75, y_test75 = train_test_split(
    data, digits.target, test_size=0.75, shuffle=False)


# Fiting 80:20 split
clf.fit(X_train, y_train)
# Predict the value of the digit on the test subset
predicted = clf.predict(X_test)

# Fiting 90:10 split
clf.fit(X_train91, y_train91)
# Predict the value of the digit on the test subset
predicted91 = clf.predict(X_test91)

# Fiting 75:25 split
clf.fit(X_train75, y_train75)
# Predict the value of the digit on the test subset
predicted75 = clf.predict(X_test75)

#print(digits.images.shape)

'''import numpy as np
from skimage import transform
from skimage import color,data
img = digits
features = digits.data
newfeatures=[transform.resize(features[i].reshape(8,8),(32,32))for i in 
range(len(features))]

plt.imshow(newfeatures[1].reshape((32,32)))'''

#img = rescale(img,0.5)
#print(img.images.shape)

"""Below we visualize the first 4 test samples and show their predicted
digit value in the title.


"""

_, axes = plt.subplots(nrows=1, ncols=4, figsize=(10, 3))
for ax, image, prediction in zip(axes, X_test, predicted):
    ax.set_axis_off()
    image = image.reshape(8, 8)
    ax.imshow(image, cmap=plt.cm.gray_r, interpolation='nearest')
    ax.set_title(f'Prediction: {prediction}')

""":func:`~sklearn.metrics.classification_report` builds a text report showing
the main classification metrics.


"""

#print(f"Classification report for classifier {clf}:\n"
     # f"{metrics.f1_score(y_test, predicted,average='weighted')}\n")

print("For 80:20 Split F1-Score is :- ",end=" ")
print(metrics.f1_score(y_test,predicted,average='weighted'))

print("For 90:10 Split F1-Score is :- ",end=" ")
print(metrics.f1_score(y_test91,predicted91,average='weighted'))

print("For 75:25 Split F1-Score is :- ",end=" ")
print(metrics.f1_score(y_test75,predicted75,average='weighted'))

"""We can also plot a `confusion matrix <confusion_matrix>` of the
true digit values and the predicted digit values.


"""

#disp = metrics.plot_confusion_matrix(clf, X_test, y_test)
#disp.figure_.suptitle("Confusion Matrix")
#print(f"Confusion matrix:\n{disp.confusion_matrix}")

#plt.show()
